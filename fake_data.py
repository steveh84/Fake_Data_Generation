# This code generated by ChatGPT 4o on 12/9/24, see comments at end for details on the prompt used
import pandas as pd
import numpy as np
import random
from faker import Faker

# Initialize Faker
fake = Faker()


# Helper function to generate random date between two dates
def random_date(start_date, end_date):
    return fake.date_time_between(start_date=start_date, end_date=end_date)


# Dataset generation functions

# Weather Data
def generate_weather_data(num_records=100):
    data = {
        'Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Temperature (C)': np.random.uniform(-10, 40, num_records),
        'Humidity (%)': np.random.uniform(10, 100, num_records),
        'Wind Speed (km/h)': np.random.uniform(0, 120, num_records),
        'Precipitation (mm)': np.random.uniform(0, 200, num_records)
    }
    return pd.DataFrame(data)


# Stock Market Data
def generate_stock_market_data(num_records=100):
    data = {
        'Timestamp': [random_date('-6y', 'now') for _ in range(num_records)],
        'Stock Symbol': [fake.company_suffix() for _ in range(num_records)],
        'Open Price': np.random.uniform(100, 1000, num_records),
        'Close Price': np.random.uniform(100, 1000, num_records),
        'High': np.random.uniform(100, 1200, num_records),
        'Low': np.random.uniform(50, 1000, num_records),
        'Volume': np.random.randint(1000, 1000000, num_records)
    }
    return pd.DataFrame(data)


# E-commerce Sales Data
def generate_ecommerce_sales_data(num_records=100):
    data = {
        'Order Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Order ID': [fake.uuid4() for _ in range(num_records)],
        'Customer': [fake.name() for _ in range(num_records)],
        'Product': [fake.word() for _ in range(num_records)],
        'Quantity': np.random.randint(1, 10, num_records),
        'Price per Unit (USD)': np.random.uniform(10, 1000, num_records)
    }
    df = pd.DataFrame(data)
    df['Total Price (USD)'] = df['Quantity'] * df['Price per Unit (USD)']
    return df


# Social Media Data
def generate_social_media_data(num_records=100):
    data = {
        'Post Timestamp': [random_date('-6y', 'now') for _ in range(num_records)],
        'User': [fake.name() for _ in range(num_records)],
        'Post Content': [fake.text(max_nb_chars=150) for _ in range(num_records)],
        'Likes': np.random.randint(0, 10000, num_records),
        'Shares': np.random.randint(0, 1000, num_records),
        'Comments': np.random.randint(0, 500, num_records)
    }
    return pd.DataFrame(data)


# Healthcare Patient Data
def generate_healthcare_patient_data(num_records=100):
    data = {
        'Patient ID': [fake.uuid4() for _ in range(num_records)],
        'Name': [fake.name() for _ in range(num_records)],
        'Age': np.random.randint(1, 100, num_records),
        'Gender': [random.choice(['Male', 'Female']) for _ in range(num_records)],
        'Admission Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Discharge Date': [random_date('now', '+6m') for _ in range(num_records)],
        'Diagnosis': [fake.word() for _ in range(num_records)],
        'Treatment': [fake.word() for _ in range(num_records)]
    }
    return pd.DataFrame(data)


# Housing Price Data
def generate_housing_price_data(num_records=100):
    data = {
        'Listing Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'House ID': [fake.uuid4() for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Area (sq ft)': np.random.uniform(500, 5000, num_records),
        'Bedrooms': np.random.randint(1, 7, num_records),
        'Bathrooms': np.random.randint(1, 5, num_records),
        'Price (USD)': np.random.uniform(50000, 1000000, num_records)
    }
    return pd.DataFrame(data)


# Credit Card Transaction Data
def generate_credit_card_transaction_data(num_records=100):
    data = {
        'Transaction Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Transaction ID': [fake.uuid4() for _ in range(num_records)],
        'Card Number': [fake.credit_card_number() for _ in range(num_records)],
        'Amount (USD)': np.random.uniform(1, 5000, num_records),
        'Merchant': [fake.company() for _ in range(num_records)]
    }
    return pd.DataFrame(data)


# Customer Churn Data
def generate_customer_churn_data(num_records=100):
    data = {
        'Customer ID': [fake.uuid4() for _ in range(num_records)],
        'Subscription Start Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Subscription End Date': [random_date('now', '+2y') for _ in range(num_records)],
        'Churned': [random.choice(['Yes', 'No']) for _ in range(num_records)],
        'Last Purchase': [random_date('-1y', 'now') for _ in range(num_records)],
        'Monthly Spend (USD)': np.random.uniform(10, 500, num_records)
    }
    return pd.DataFrame(data)


# Movie Ratings Data
def generate_movie_ratings_data(num_records=100):
    data = {
        'Rating Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Movie ID': [fake.uuid4() for _ in range(num_records)],
        'User': [fake.name() for _ in range(num_records)],
        'Rating': np.random.uniform(1, 5, num_records),
        'Review': [fake.text(max_nb_chars=200) for _ in range(num_records)]
    }
    return pd.DataFrame(data)


# Retail Store Data
def generate_retail_store_data(num_records=100):
    data = {
        'Store ID': [fake.uuid4() for _ in range(num_records)],
        'Store Location': [fake.city() for _ in range(num_records)],
        'Product': [fake.word() for _ in range(num_records)],
        'Sale Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Quantity Sold': np.random.randint(1, 100, num_records),
        'Revenue (USD)': np.random.uniform(10, 1000, num_records)
    }
    return pd.DataFrame(data)


# Sensor Data
def generate_sensor_data(num_records=100):
    data = {
        'Sensor ID': [fake.uuid4() for _ in range(num_records)],
        'Timestamp': [random_date('-1y', 'now') for _ in range(num_records)],
        'Temperature (C)': np.random.uniform(-10, 50, num_records),
        'Humidity (%)': np.random.uniform(0, 100, num_records),
        'Pressure (hPa)': np.random.uniform(950, 1050, num_records)
    }
    return pd.DataFrame(data)


# Traffic Flow Data
def generate_traffic_flow_data(num_records=100):
    data = {
        'Timestamp': [random_date('-1y', 'now') for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Vehicle Count': np.random.randint(1, 500, num_records),
        'Average Speed (km/h)': np.random.uniform(20, 120, num_records)
    }
    return pd.DataFrame(data)


# Traffic Flow Data
def generate_traffic_flow_data(num_records=100):
    data = {
        'Timestamp': [random_date('-1y', 'now') for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Vehicle Count': np.random.randint(1, 500, num_records),
        'Average Speed (km/h)': np.random.uniform(20, 120, num_records)
    }
    return pd.DataFrame(data)

# Energy Consumption Data
def generate_energy_consumption_data(num_records=100):
    data = {
        'Timestamp': [random_date('-6y', 'now') for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Energy Consumption (kWh)': np.random.uniform(100, 1000, num_records),
        'Cost (USD)': np.random.uniform(10, 500, num_records)
    }
    return pd.DataFrame(data)

# Genomic Data
def generate_genomic_data(num_records=100):
    bases = ['A', 'T', 'C', 'G']
    data = {
        'Sequence ID': [fake.uuid4() for _ in range(num_records)],
        'Gene Sequence': [''.join(random.choices(bases, k=100)) for _ in range(num_records)],
        'Organism': [fake.word() for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Sports Performance Data
def generate_sports_performance_data(num_records=100):
    data = {
        'Athlete Name': [fake.name() for _ in range(num_records)],
        'Sport': [random.choice(['Soccer', 'Basketball', 'Tennis', 'Swimming', 'Track']) for _ in range(num_records)],
        'Date': [random_date('-1y', 'now') for _ in range(num_records)],
        'Performance Metric': np.random.uniform(5, 100, num_records),  # e.g., distance, time, score
        'Units': [random.choice(['meters', 'points', 'seconds']) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Air Quality Data
def generate_air_quality_data(num_records=100):
    data = {
        'Timestamp': [random_date('-1y', 'now') for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'PM2.5': np.random.uniform(0, 500, num_records),  # Particulate Matter
        'PM10': np.random.uniform(0, 600, num_records),   # Particulate Matter
        'NO2': np.random.uniform(0, 150, num_records),    # Nitrogen Dioxide
        'O3': np.random.uniform(0, 200, num_records),     # Ozone
    }
    return pd.DataFrame(data)

# Financial Transaction Data
def generate_financial_transaction_data(num_records=100):
    data = {
        'Transaction ID': [fake.uuid4() for _ in range(num_records)],
        'Timestamp': [random_date('-6y', 'now') for _ in range(num_records)],
        'Amount (USD)': np.random.uniform(1, 10000, num_records),
        'Merchant': [fake.company() for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Image Recognition Data
def generate_image_recognition_data(num_records=100):
    data = {
        'Image ID': [fake.uuid4() for _ in range(num_records)],
        'Image Label': [random.choice(['cat', 'dog', 'car', 'tree', 'house']) for _ in range(num_records)],
        'Resolution (pixels)': [f"{random.randint(300, 4000)}x{random.randint(300, 4000)}" for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Text Sentiment Data
def generate_text_sentiment_data(num_records=100):
    sentiments = ['Positive', 'Neutral', 'Negative']
    data = {
        'User': [fake.name() for _ in range(num_records)],
        'Post': [fake.text(max_nb_chars=200) for _ in range(num_records)],
        'Sentiment': [random.choice(sentiments) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Supply Chain Data
def generate_supply_chain_data(num_records=100):
    data = {
        'Order ID': [fake.uuid4() for _ in range(num_records)],
        'Supplier': [fake.company() for _ in range(num_records)],
        'Product': [fake.word() for _ in range(num_records)],
        'Order Date': [random_date('-6y', 'now') for _ in range(num_records)],
        'Delivery Date': [random_date('now', '+1y') for _ in range(num_records)],
        'Order Status': [random.choice(['Shipped', 'Delivered', 'In Transit', 'Cancelled']) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Autonomous Vehicle Data
def generate_autonomous_vehicle_data(num_records=100):
    data = {
        'Vehicle ID': [fake.uuid4() for _ in range(num_records)],
        'Timestamp': [random_date('-1y', 'now') for _ in range(num_records)],
        'Speed (km/h)': np.random.uniform(0, 120, num_records),
        'Distance (m)': np.random.uniform(0, 500, num_records),
        'Steering Angle (degrees)': np.random.uniform(-30, 30, num_records),
        'Sensor Status': [random.choice(['OK', 'Fault']) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Email Spam Classification Data
def generate_email_spam_classification_data(num_records=100):
    data = {
        'Email ID': [fake.uuid4() for _ in range(num_records)],
        'Sender': [fake.email() for _ in range(num_records)],
        'Subject': [fake.sentence(nb_words=6) for _ in range(num_records)],
        'Content': [fake.text(max_nb_chars=300) for _ in range(num_records)],
        'Is Spam': [random.choice([True, False]) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Fraud Detection Data
def generate_fraud_detection_data(num_records=100):
    data = {
        'Transaction ID': [fake.uuid4() for _ in range(num_records)],
        'Timestamp': [random_date('-2y', 'now') for _ in range(num_records)],
        'Amount (USD)': np.random.uniform(10, 10000, num_records),
        'Merchant': [fake.company() for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Is Fraud': [random.choice([True, False]) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Bank Loan Data
def generate_bank_loan_data(num_records=100):
    data = {
        'Loan ID': [fake.uuid4() for _ in range(num_records)],
        'Customer Name': [fake.name() for _ in range(num_records)],
        'Loan Amount (USD)': np.random.uniform(1000, 500000, num_records),
        'Loan Purpose': [random.choice(['Home', 'Car', 'Personal', 'Business', 'Education']) for _ in range(num_records)],
        'Loan Issue Date': [random_date('-5y', 'now') for _ in range(num_records)],
        'Interest Rate (%)': np.random.uniform(1.0, 15.0, num_records),
        'Loan Duration (Years)': np.random.randint(1, 30, num_records),
        'Loan Status': [random.choice(['Approved', 'Rejected', 'Pending']) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Population Demographics Data
def generate_population_demographics_data(num_records=100):
    data = {
        'Person ID': [fake.uuid4() for _ in range(num_records)],
        'Name': [fake.name() for _ in range(num_records)],
        'Age': np.random.randint(1, 100, num_records),
        'Gender': [random.choice(['Male', 'Female']) for _ in range(num_records)],
        'Occupation': [fake.job() for _ in range(num_records)],
        'City': [fake.city() for _ in range(num_records)],
        'Country': [fake.country() for _ in range(num_records)],
        'Annual Income (USD)': np.random.uniform(5000, 200000, num_records)
    }
    return pd.DataFrame(data)

# Music Streaming Data
def generate_music_streaming_data(num_records=100):
    data = {
        'Stream ID': [fake.uuid4() for _ in range(num_records)],
        'User ID': [fake.uuid4() for _ in range(num_records)],
        'Song Title': [fake.sentence(nb_words=3) for _ in range(num_records)],
        'Artist': [fake.name() for _ in range(num_records)],
        'Stream Duration (minutes)': np.random.uniform(1, 10, num_records),
        'Stream Timestamp': [random_date('-2y', 'now') for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Job Market Data
def generate_job_market_data(num_records=100):
    data = {
        'Job ID': [fake.uuid4() for _ in range(num_records)],
        'Company': [fake.company() for _ in range(num_records)],
        'Job Title': [fake.job() for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)],
        'Salary (USD)': np.random.uniform(30000, 150000, num_records),
        'Posted Date': [random_date('-2y', 'now') for _ in range(num_records)],
        'Is Remote': [random.choice([True, False]) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Satellite Imagery Data
def generate_satellite_imagery_data(num_records=100):
    data = {
        'Image ID': [fake.uuid4() for _ in range(num_records)],
        'Satellite Name': [fake.company_suffix() for _ in range(num_records)],
        'Image Resolution (pixels)': [f"{random.randint(1024, 4096)}x{random.randint(1024, 4096)}" for _ in range(num_records)],
        'Image Timestamp': [random_date('-2y', 'now') for _ in range(num_records)],
        'Location': [fake.city() for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Natural Language Processing (NLP) Corpus Data
def generate_nlp_corpus_data(num_records=100):
    data = {
        'Document ID': [fake.uuid4() for _ in range(num_records)],
        'Content': [fake.text(max_nb_chars=500) for _ in range(num_records)],
        'Language': [random.choice(['English', 'Spanish', 'French', 'German', 'Chinese']) for _ in range(num_records)],
        'Sentiment': [random.choice(['Positive', 'Negative', 'Neutral']) for _ in range(num_records)]
    }
    return pd.DataFrame(data)

# Time Series Economic Data
def generate_time_series_economic_data(num_records=100):
    data = {
        'Timestamp': pd.date_range(start='1/1/2000', periods=num_records, freq='ME'),
        'GDP (Billion USD)': np.random.uniform(500, 20000, num_records),
        'Unemployment Rate (%)': np.random.uniform(1, 15, num_records),
        'Inflation Rate (%)': np.random.uniform(-2, 10, num_records)
    }
    return pd.DataFrame(data)

# Function to generate and save all datasets
def generate_and_save_datasets():
    datasets = [
        ('Weather Data', generate_weather_data),
        ('Stock Market Data', generate_stock_market_data),
        ('E-commerce Sales Data', generate_ecommerce_sales_data),
        ('Social Media Data', generate_social_media_data),
        ('Healthcare Patient Data', generate_healthcare_patient_data),
        ('Housing Price Data', generate_housing_price_data),
        ('Credit Card Transaction Data', generate_credit_card_transaction_data),
        ('Customer Churn Data', generate_customer_churn_data),
        ('Movie Ratings Data', generate_movie_ratings_data),
        ('Retail Store Data', generate_retail_store_data),
        ('Sensor Data', generate_sensor_data),
        ('Traffic Flow Data', generate_traffic_flow_data),
        ('Energy Consumption Data', generate_energy_consumption_data),
        ('Genomic Data', generate_genomic_data),
        ('Sports Performance Data', generate_sports_performance_data),
        ('Air Quality Data', generate_air_quality_data),
        ('Financial Transaction Data', generate_financial_transaction_data),
        ('Image Recognition Data', generate_image_recognition_data),
        ('Text Sentiment Data', generate_text_sentiment_data),
        ('Supply Chain Data', generate_supply_chain_data),
        ('Autonomous Vehicle Data', generate_autonomous_vehicle_data),
        ('Email Spam Classification Data', generate_email_spam_classification_data),
        ('Fraud Detection Data', generate_fraud_detection_data),
        ('Bank Loan Data', generate_bank_loan_data),
        ('Population Demographics Data', generate_population_demographics_data),
        ('Music Streaming Data', generate_music_streaming_data),
        ('Job Market Data', generate_job_market_data),
        ('Satellite Imagery Data', generate_satellite_imagery_data),
        ('NLP Corpus Data', generate_nlp_corpus_data),
        ('Time Series Economic Data', generate_time_series_economic_data),
    ]

    for name, generator in datasets:
        df = generator(100)
        filename = f'{name.replace(" ", "_").lower()}.csv'
        df.to_csv(filename, index=False)
        print(f'{name} dataset saved as {filename}')


# Generate and save all datasets
generate_and_save_datasets()

# #################################################################
# Prompt used in ChatGPT 4o to generate the code above
# NOTE: Due to the output limitations of ChatGPT, the same prompt
# had to be asked 3 times, each time with a
# different set of data requested, about 11 datasets each time
# #################################################################

# Write a python script which uses the faker package to generate one fake dataset for each of the following topics, and make the dates and timestamps random :
# Weather Data
# Stock Market Data
# E-commerce Sales Data
# Social Media Data
# Healthcare Patient Data
# Housing Price Data
# Credit Card Transaction Data
# Customer Churn Data
# Movie Ratings Data
# Retail Store Data
# Sensor Data
# Traffic Flow Data
# Energy Consumption Data
# Genomic Data
# Sports Performance Data
# Air Quality Data
# Financial Transaction Data
# Image Recognition Data
# Text Sentiment Data
# Supply Chain Data
# Autonomous Vehicle Data
# Email Spam Classification Data
# Fraud Detection Data
# Bank Loan Data
# Population Demographics Data
# Music Streaming Data
# Job Market Data
# Satellite Imagery Data
# Natural Language Processing (NLP) Corpus
# Time Series Economic Data
